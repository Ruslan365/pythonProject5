from abc import ABC, abstractmethod, abstractproperty

class vehicle:
    type_name = None
    def __init__(self, price, weight, lifting_capacity):
        self.weight = weight
        self.lifting_capaciti = lifting_capacity
        self.price = price

class plane(vehicle):
    type_name = "самолет"
    def __init__ (self, price, weight, lifting_capaciti, max_hight):
        super().__init__(price, weight, lifting_capaciti)
        self.max_hight = max_hight

class car(vehicle):
    type_name = "автомобиль"
    def __init__(self,price, weight, lifting_capaciti,wheel_quantity):
        super().__init__(price, weight, lifting_capaciti)
        self.wheel_quantity = wheel_quantity

class ship(vehicle):
    type_name = "корабль"
    def __init__(self):
        super().__init__(price, weight, lifting_capaciti,displacement)
        self.displacement = displacement

class light_car(car):
    type_name = "порше"

    def __init__(self, price, weight, lifting_capaciti,wheel_quantity, speed):
        super().__init__(price, weight, lifting_capaciti,wheel_quantity)
        self.speed = speed

class sailing_ship(ship):
    type_name = "титаник"

    def __init__(self, price, weight, lifting_capaciti, displacement):
        super().__init__(price, weight, lifting_capaciti)

class military_plane(plane):
    type_name = "ави"

    def __init__(self, price, weight, lifting_capaciti, max_hight):
        super().__init__(price, weight, lifting_capaciti,max_hight)

demo1 = military_plane("0","1","2","3")
print (demo1.price, demo1.weight, demo1.lifting_capaciti, demo1.max_hight)
demo2 = light_car(0,1,2,3,4)
print (demo2.price, demo2.weight, demo2.lifting_capaciti, demo2.wheel_quantity,demo2.speed )
